#include <stdio.h>
#include "utils.h"
 
extern char *strdup(const char *);

answer_t ask_question(char *question, check_func check, convert_func convert)
{
  int buf_siz = 64;
  char buffer[buf_siz];
  
  do
    {
      printf("%s\n", question);
      read_string(buffer, buf_siz);
    }
  while(!check(buffer));
  
  return convert(buffer);  
}

bool not_empty(char *str)
{
  return strlen(str) > 0;
}

bool is_number(char *str)
{
  int stringlength = strlen(str);
  int i;
  for (i=0; i < stringlength; i++)
    {
      bool currentIsDigit = isdigit(str[i]);
      bool firstIsMinus = str[0] == '-';	
      if (i == 0 && !currentIsDigit && !firstIsMinus) 
	{
	  return false;
	}
      if (i > 0 && !currentIsDigit)
	{
	  return false;
	}
    }
  return true;
}

void clear_input_buffer ()
{
  int c;
  do
    {
      c = getchar();
    }
  while (c != '\n' && c != EOF);
}



int ask_question_int(char *question)
{
  answer_t answer = ask_question(question, is_number, (convert_func) atoi);
  return answer.int_value; // svaret som ett heltal
}

bool is_shelf(char *str)
{
  if(strlen(str) != 3)
    {
      return false;
    }
  else if(isalpha(str[0]))
    {
      int i = 1;
      while(i < strlen(str))
	{
	  if(!isdigit(str[i]))
	    {
	      return false;
	    }
	  else
	    {
	      i++;
	    } 
	}
      return true;
    }
  else
    {
      return false;
    }
}

char *ask_question_shelf(char *question)
{
  return ask_question(question, is_shelf, (convert_func) strdup).string_value;
}

int read_string(char *buf, int buf_siz)
{
  int c = getchar();
  int count = 0;
  
  while(count < buf_siz - 1 && c != '\n' && c != EOF)
    {
      buf[count] = c;
      count++;
      c = getchar();
    }
  if(count == buf_siz - 1)
    {
      clear_input_buffer();
    }
 
  buf[count] = '\0';
  return count;
}

char *ask_question_string(char *question)
{
  return ask_question(question, not_empty, (convert_func) strdup).string_value;
}

bool is_menu_command(char *c)
{
  if(isalpha(c[0]) && strlen(c) == 1)
    {
      char *command_list = "LlTtRrGgHhAaCcQq";
      int i = 0;
      for(; i < strlen(command_list); i++)
	{
	  if(c[0] == command_list[i]) 
	    {
	      return true;
	    }
	}
      return false;
    }
  else
    {
      return false;
    }
}

answer_t toupper_wrap(char *c)
{
  answer_t answer = {.char_value = toupper(c[0])};
  return answer;
}

char ask_question_menu()
{
  char *question = "[L]ägga till en vara\n[T]a bort en vara\n[R]edigera en vara\nÅn[g]ra senaste ändringen\nLista [h]ela varukatalogen\n[A]vsluta";
  return ask_question(question, is_menu_command, (convert_func) toupper_wrap).char_value;
}





