#include <stdio.h>
#include <stdlib.h>
#include "linked_list.h"
#include "hash_table.h"
#include "utils.h"

#define Free(ptr) {free(ptr); ptr = NULL;}

typedef struct cart ioopm_cart_t;
typedef struct merch ioopm_merch_t;

struct merch
{
  char *name;
  char *description;
  int price;
  //ioopm_list_t *location;
};

struct shelf
{
  char *shelf_nr;
  int quantity;
};

struct cart
{
  char *id;
  ioopm_list_t *order;
};


ioopm_cart_t *create_cart(char *id)
{
  ioopm_cart_t *new_cart = calloc(1, sizeof(ioopm_cart_t));
  ioopm_list_t *order = ioopm_linked_list_create(NULL);
  new_cart->id = id;
  new_cart->order = order;
  return new_cart;
}

void remove_cart(ioopm_cart_t *cart_to_remove)
{
  ioopm_linked_list_destroy(cart_to_remove->order);
  Free(cart_to_remove);
}

void add_merch(ioopm_hash_table_t *merch_db)
{
  //todo använd ask_question för att få detaljerna för den nya varan
  ioopm_merch_t *new_merch = calloc(1, sizeof(ioopm_merch_t));
  new_merch->name = ask_question_string("Name for the new merchandise?");
  new_merch->description = ask_question_string("Description for the new merchandise?");
  new_merch->price = ask_question_int("Price for the new merchandise");
  
  elem_t merch_information = {.ptr_value = new_merch};
  elem_t merch_to_add = {.str_value = new_merch->name};
  elem_t ignored_value;
  
  if(!ioopm_hash_table_lookup(merch_db, merch_to_add, &ignored_value))
    {
      ioopm_hash_table_insert(merch_db, merch_to_add, merch_information);
    }
}

int string_knr_hash(elem_t str)
{
  int result = 0;
  do
    {
      result = result * 31 + *str.str_value;
    }
  while (*++str.str_value != '\0');
  if(result < 0) result = -result;
  return result;
}

